name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        ports: ["5432:5432"]
        env:
          POSTGRES_DB: tasks
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd="pg_isready -U user -d tasks"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=10
      redis:
        image: redis:7-alpine
        ports: ["6379:6379"]
        options: >-
          --health-cmd="redis-cli ping || exit 1"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=10

    defaults:
      run:
        working-directory: backend

    env:
      DATABASE_URL: postgresql://user:password@localhost:5432/tasks
      REDIS_URL: redis://localhost:6379
      JWT_SECRET: supersecret
      NODE_ENV: test
      ENABLE_SWAGGER: 'false'

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - run: npm ci --legacy-peer-deps
      - run: npx prisma generate --schema=prisma/schema.prisma
      - run: npx prisma db push --schema=prisma/schema.prisma

      - run: npm run lint --if-present
      - run: npm run build

      # Se tiveres tests unit√°rios no backend:
      - run: npm test --if-present

  frontend-e2e:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - run: npm ci --legacy-peer-deps
      - run: npx playwright install --with-deps

      # arranca o dev server e corre os testes E2E
      - run: npx playwright test
